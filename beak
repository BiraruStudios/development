#!/usr/bin/env bash

# Detect whether the system uses the new `docker compose` subcommand (v2) 
if docker compose &>/dev/null; then
    DOCKER_COMPOSE=(docker compose)
else
    DOCKER_COMPOSE=(docker-compose)
fi

# Initialize empty arrays for command arguments
ARGS=()
# Default exec command for the Panel container as the `pterodactyl` user
PEXEC=(exec -u pterodactyl app)

# Handle SSH into the Panel container
if [ "$1" == "app" ]; then
  # Source environment variables if the Panel .env file exists
  if [ -f ./code/panel/.env ]; then
    source ./code/panel/.env
  fi

  shift 1
  CONTAINER_USER=pterodactyl

  # Allow overriding the container user to `root`
  if [ "$1" == "root" ]; then
    CONTAINER_USER=root
  fi

  # Append the exec command for the Panel container
  ARGS+=(exec -u "$CONTAINER_USER" app bash)

# Handle SSH into the Wings container
elif [ "$1" == "wings" ]; then
  shift 1
  ARGS+=(exec -u root wings bash)

# Handle running Laravel Artisan commands inside the Panel container
elif [ "$1" == "artisan" ]; then
  shift 1
  ARGS+=("${PEXEC[@]}" php artisan "$@")

# Handle launching Laravel Tinker REPL inside the Panel container
elif [ "$1" == "tinker" ]; then
  shift 1
  ARGS+=("${PEXEC[@]}" php artisan tinker)

# Handle starting the development server inside the Panel container
elif [ "$1" == "serve" ]; then
  shift 1
  ARGS+=("${PEXEC[@]}" yarn run serve "$@")

# Handle all other commands (pass through directly)
else
  ARGS+=("$@")
fi

# Execute the final docker compose command with the built arguments
"${DOCKER_COMPOSE[@]}" "${ARGS[@]}"
